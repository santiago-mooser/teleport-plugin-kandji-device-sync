name: Docker SLSA3 Build & Publish

on:
  push:
    tags:
      - 'v*.*.*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push both container variants
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      debug-digest: ${{ steps.build-debug.outputs.digest }}
      main-digest: ${{ steps.build-main.outputs.digest }}
      version: ${{ steps.meta.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        run: |
          # Extract version from tag (remove 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

      - name: Build and push debug Alpine-based container
        uses: docker/build-push-action@v5
        id: build-debug
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-debug:${{ steps.meta.outputs.version }}
          labels: |
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.description=Teleport Plugin for Kandji Device Sync
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          build-args: |
            GIT_COMMIT_TAG=${{ steps.meta.outputs.version }}
            GIT_COMMIT_SHA=${{ github.sha }}
            GIT_COMMIT_MESSAGE=${{ github.event.head_commit.message }}
            IMAGE_BUILD_TIME=${{ github.event.repository.updated_at }}
            CI_PROJECT_URL=${{ github.server_url }}/${{ github.repository }}
            CI_PROJECT_NAME=${{ github.repository }}

      - name: Build and push main Distroless-based container
        uses: docker/build-push-action@v5
        id: build-main
        with:
          context: .
          file: ./Dockerfile.prod
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          labels: |
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.description=Teleport Plugin for Kandji Device Sync
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          build-args: |
            GIT_COMMIT_TAG=${{ steps.meta.outputs.version }}
            GIT_COMMIT_SHA=${{ github.sha }}
            GIT_COMMIT_MESSAGE=${{ github.event.head_commit.message }}
            IMAGE_BUILD_TIME=${{ github.event.repository.updated_at }}
            CI_PROJECT_URL=${{ github.server_url }}/${{ github.repository }}
            CI_PROJECT_NAME=${{ github.repository }}

      - name: Output image name
        id: image
        run: |
          # Normalize image name to lowercase for SLSA provenance
          image_name=$(echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
          echo "image=${image_name}" >> "$GITHUB_OUTPUT"

  # Generate SLSA3 provenance for main container
  provenance-main:
    needs: [build]
    permissions:
      actions: read # for detecting the Github Actions environment
      id-token: write # for creating OIDC tokens for signing
      packages: write # for uploading attestations
    if: startsWith(github.ref, 'refs/tags/')
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0
    with:
      image: ${{ needs.build.outputs.image }}
      digest: ${{ needs.build.outputs.main-digest }}
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  # Generate SLSA3 provenance for debug container
  provenance-debug:
    needs: [build]
    permissions:
      actions: read # for detecting the Github Actions environment
      id-token: write # for creating OIDC tokens for signing
      packages: write # for uploading attestations
    if: startsWith(github.ref, 'refs/tags/')
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0
    with:
      image: ${{ needs.build.outputs.image }}-debug
      digest: ${{ needs.build.outputs.debug-digest }}
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  # Summary job to output build information
  summary:
    runs-on: ubuntu-latest
    needs: [build, provenance-main, provenance-debug]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Output build summary
        run: |
          echo "🐳 Successfully built and published multi-platform container images with SLSA3 provenance:"
          echo ""
          echo "📦 Main (Distroless-based) - linux/amd64,linux/arm64:"
          echo "   • ${{ needs.build.outputs.image }}:${{ needs.build.outputs.version }}"
          echo "   • SHA: ${{ needs.build.outputs.main-digest }}"
          echo ""
          echo "📦 Debug (Alpine-based) - linux/amd64,linux/arm64:"
          echo "   • ${{ needs.build.outputs.image }}-debug:${{ needs.build.outputs.version }}"
          echo "   • SHA: ${{ needs.build.outputs.debug-digest }}"
          echo ""
          echo "🔐 SLSA3 provenance attestations generated and published for both images"
          echo "📋 Usage examples:"
          echo "   docker pull ${{ needs.build.outputs.image }}:${{ needs.build.outputs.version }}"
          echo "   docker pull ${{ needs.build.outputs.image }}-debug:${{ needs.build.outputs.version }}"
          echo ""
          echo "🔍 Verify provenance with slsa-verifier:"
          echo "   slsa-verifier verify-image ${{ needs.build.outputs.image }}:${{ needs.build.outputs.version }} \\"
          echo "     --source-uri github.com/${{ github.repository }}"
