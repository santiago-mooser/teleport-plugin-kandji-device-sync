name: Docker SLSA3 Build & Publish

on:
  push:
    tags:
      - 'v*.*.*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Extract metadata for consistent use across jobs
  metadata:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.meta.outputs.version }}
      commit-sha: ${{ steps.meta.outputs.commit-sha }}
      commit-date: ${{ steps.meta.outputs.commit-date }}
      image-name: ${{ steps.meta.outputs.image-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract metadata
        id: meta
        run: |
          # Extract version from tag (remove 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

          # Get commit info
          echo "commit-sha=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
          echo "commit-date=$(git log --date=iso8601-strict -1 --pretty=%ct)" >> "$GITHUB_OUTPUT"

          # Normalize image name to lowercase
          IMAGE_NAME=$(echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
          echo "image-name=${IMAGE_NAME}" >> "$GITHUB_OUTPUT"

  # Build and publish standard Alpine-based container with SLSA3
  build-standard:
    needs: metadata
    permissions:
      id-token: write # For SLSA provenance generation
      contents: read
      packages: write # For GHCR publishing
      actions: read # Required for workflow path reading
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_container_slsa3.yml@v2.0.0
    with:
      image: ${{ needs.metadata.outputs.image-name }}
      registry-username: ${{ github.actor }}
      dockerfile: Dockerfile
      build-args: |
        GIT_COMMIT_TAG=${{ needs.metadata.outputs.version }}
        GIT_COMMIT_SHA=${{ needs.metadata.outputs.commit-sha }}
        GIT_COMMIT_MESSAGE=${{ github.event.head_commit.message }}
        IMAGE_BUILD_TIME=${{ needs.metadata.outputs.commit-date }}
        CI_PROJECT_URL=${{ github.server_url }}/${{ github.repository }}
        CI_PROJECT_NAME=${{ github.repository }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  # Build and publish production Distroless-based container with SLSA3
  build-production:
    needs: metadata
    permissions:
      id-token: write # For SLSA provenance generation
      contents: read
      packages: write # For GHCR publishing
      actions: read # Required for workflow path reading
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_container_slsa3.yml@v2.0.0
    with:
      image: ${{ needs.metadata.outputs.image-name }}-prod
      registry-username: ${{ github.actor }}
      dockerfile: Dockerfile.prod
      build-args: |
        GIT_COMMIT_TAG=${{ needs.metadata.outputs.version }}
        GIT_COMMIT_SHA=${{ needs.metadata.outputs.commit-sha }}
        GIT_COMMIT_MESSAGE=${{ github.event.head_commit.message }}
        IMAGE_BUILD_TIME=${{ needs.metadata.outputs.commit-date }}
        CI_PROJECT_URL=${{ github.server_url }}/${{ github.repository }}
        CI_PROJECT_NAME=${{ github.repository }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  # Tag images with proper version tags
  tag-images:
    runs-on: ubuntu-latest
    needs: [metadata, build-standard, build-production]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag and push standard container with version
        run: |
          # The SLSA builder already pushed the image, we just need to add version tags
          docker pull ${{ needs.build-standard.outputs.image }}@${{ needs.build-standard.outputs.digest }}

          # Tag with semantic version
          docker tag ${{ needs.build-standard.outputs.image }}@${{ needs.build-standard.outputs.digest }} \
            ${{ needs.metadata.outputs.image-name }}:${{ needs.metadata.outputs.version }}
          docker tag ${{ needs.build-standard.outputs.image }}@${{ needs.build-standard.outputs.digest }} \
            ${{ needs.metadata.outputs.image-name }}:latest

          # Push version tags
          docker push ${{ needs.metadata.outputs.image-name }}:${{ needs.metadata.outputs.version }}
          docker push ${{ needs.metadata.outputs.image-name }}:latest

      - name: Tag and push production container with version
        run: |
          # The SLSA builder already pushed the image, we just need to add version tags
          docker pull ${{ needs.build-production.outputs.image }}@${{ needs.build-production.outputs.digest }}

          # Tag with semantic version
          docker tag ${{ needs.build-production.outputs.image }}@${{ needs.build-production.outputs.digest }} \
            ${{ needs.metadata.outputs.image-name }}-prod:${{ needs.metadata.outputs.version }}
          docker tag ${{ needs.build-production.outputs.image }}@${{ needs.build-production.outputs.digest }} \
            ${{ needs.metadata.outputs.image-name }}-prod:latest

          # Push version tags
          docker push ${{ needs.metadata.outputs.image-name }}-prod:${{ needs.metadata.outputs.version }}
          docker push ${{ needs.metadata.outputs.image-name }}-prod:latest

      - name: Output image information
        run: |
          echo "üê≥ Successfully published container images with SLSA3 provenance:"
          echo ""
          echo "üì¶ Standard (Alpine-based):"
          echo "   ‚Ä¢ ${{ needs.metadata.outputs.image-name }}:${{ needs.metadata.outputs.version }}"
          echo "   ‚Ä¢ ${{ needs.metadata.outputs.image-name }}:latest"
          echo "   ‚Ä¢ SHA: ${{ needs.build-standard.outputs.digest }}"
          echo ""
          echo "üì¶ Production (Distroless-based):"
          echo "   ‚Ä¢ ${{ needs.metadata.outputs.image-name }}-prod:${{ needs.metadata.outputs.version }}"
          echo "   ‚Ä¢ ${{ needs.metadata.outputs.image-name }}-prod:latest"
          echo "   ‚Ä¢ SHA: ${{ needs.build-production.outputs.digest }}"
          echo ""
          echo "üîê SLSA3 provenance attestations available for both images"
          echo "üìã Usage examples:"
          echo "   docker pull ${{ needs.metadata.outputs.image-name }}:${{ needs.metadata.outputs.version }}"
          echo "   docker pull ${{ needs.metadata.outputs.image-name }}-prod:${{ needs.metadata.outputs.version }}"
          echo ""
          echo "üîç Verify provenance with slsa-verifier:"
          echo "   slsa-verifier verify-image ${{ needs.metadata.outputs.image-name }}:${{ needs.metadata.outputs.version }} \\"
          echo "     --source-uri github.com/${{ github.repository }}"
